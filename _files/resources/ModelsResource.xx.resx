<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="'{0}' and '{1}' do not match." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="A non-empty request body is required." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="A value for the '{0}' parameter or property was not provided." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="A value is required." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="Authenticator code" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Both ErrorMessageResourceType and ErrorMessageResourceName need to be set on this attribute." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Cannot retrieve property '{0}' because localization failed.  Type '{1}' is not public or does not contain a public static string property with the name '{2}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Confirm new password" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Confirm password" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Could not convert the value of type '{0}' to '{1}' as expected by method {2}.{3}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Could not find a property named {0}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Current password" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Either ErrorMessageString or ErrorMessageResourceName must be set, but not both." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Email" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Full name" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context)." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="MetadataClassType cannot be null." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="MinLengthAttribute must have a Length value that is zero or greater." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="New Email" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="New Password" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Only Alphabets, Space and &quot; - ' ` .&quot; allowed." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Password" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Phone number" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Recovery code" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Remember me" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Remember this machine" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="The argument '{0}' cannot be null, empty or contain only whitespace." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The associated metadata type for type '{0}' contains the following unknown properties or fields: {1}. Please make sure that the names of these members match the names of the properties on the main type." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The custom DataType string cannot be null or empty." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The custom validation type '{0}' must be public." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' does not exist in type '{1}' or is not public and static." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' in type '{1}' must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' in type '{1}' must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The CustomValidationAttribute.Method was not specified." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The CustomValidationAttribute.ValidatorType was not specified." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field must be a number." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The field of type {0} must be a string, array or ICollection type." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must be a number." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The field {0} must be a string or array type with a maximum length of '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must be a string or array type with a minimum length of '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must be a string with a maximum length of {1}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must be a string with a minimum length of {2} and a maximum length of {1}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must be between {1} and {2}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The field {0} must match the regular expression '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The instance provided must match the ObjectInstance on the ValidationContext supplied." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The key parameter at position {0} is null. Every key control parameter must be a string." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The key parameter at position {0} with value '{1}' is not a string. Every key control parameter must be a string." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The key parameter at position {0} with value '{1}' occurs more than once." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The maximum length must be a nonnegative integer." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The maximum value '{0}' must be greater than or equal to the minimum value '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The minimum and maximum values must be set." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The number of control parameters must be even." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The OperandType must be set when strings are used for minimum and maximum values." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The password must be at least 6 characters long that contains at least an uppercase, a lowercase, a non-alphanumeric, a number and one distinct characters." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The password must be at least {0} characters long that contains at least an uppercase, a lowercase, a non-alphanumeric, a number and {1} distinct characters." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The pattern must be set to a valid regular expression." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The property '{0}' on resource type '{1}' is not a string type." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The property {0}.{1} could not be found." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The resource type '{0}' does not have an accessible static property named '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The supplied value is invalid for {0}." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The supplied value is invalid." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The type '{0}' does not contain a public property named '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The type '{0}' needs to represent an enumeration type." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The type provided for EnumDataTypeAttribute cannot be null." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The type {0} must implement {1}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The value '{0}' is invalid." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The value '{0}' is not valid for {1}." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The value '{0}' is not valid." xml:space="preserve">
    <value />
    <comment>ModelBindings</comment>
  </data>
  <data name="The value for property '{0}' must be of type '{1}'." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field is not a valid credit card number." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field is not a valid e-mail address." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field is not a valid fully-qualified http, https, or ftp URL." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field is not a valid phone number." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field is required." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} field only accepts files with the following extensions: {1}" xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} must be at least {1} characters long." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} must be at least {2} and at max {1} characters long." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} must be at max {1} characters long." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} must be between {1} and {2}." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="The {0} property has not been set.  Use the {1} method to get the value." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
  <data name="Username" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="Verification Code" xml:space="preserve">
    <value />
    <comment>Display</comment>
  </data>
  <data name="{0} is not valid." xml:space="preserve">
    <value />
    <comment>DataAnnotations</comment>
  </data>
</root>